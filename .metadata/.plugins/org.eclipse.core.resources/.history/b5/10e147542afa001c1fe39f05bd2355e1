package com.flightapp.bookingservice.service.impl;

import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import javax.persistence.Column;

import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;

import com.flightapp.bookingservice.dto.BookingRequestDto;
import com.flightapp.bookingservice.dto.PassengerDetailsDto;
import com.flightapp.bookingservice.model.Booking;
import com.flightapp.bookingservice.model.PassengerDetails;
import com.flightapp.bookingservice.repository.BookingRepository;
import com.flightapp.bookingservice.service.BookingService;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class BookingServiceImpl implements BookingService{
	
	private final BookingRepository bookingRepository;
	
	private final WebClient webClient;

	@Override
	public void bookTicket(BookingRequestDto bookingRequestDto) {
		Booking bookingDetails = mapToModel(bookingRequestDto);
		bookingDetails.setPnrNumber(UUID.randomUUID().toString());
		bookingDetails.setBookingDate(LocalDateTime.now());
		
		//to convert Dto to model
		List<PassengerDetails> passengerDetailsList = bookingRequestDto.getPassengerDetailsDtoList().stream()
				.map(this::mapToModelPassengerDetails).collect(Collectors.toList());
		
		bookingDetails.setPassengerDetails(passengerDetailsList);
		
		//Call Inventory Service to check Seats availability at the time of booking.
		
		Boolean isFlightExists = webClient.get().uri("http://localhost:8080/api/inventory")
			.retrieve()
				.bodyToMono(Boolean.class).block();
		
		bookingRepository.save(bookingDetails);
	}
	
	private PassengerDetails mapToModelPassengerDetails(PassengerDetailsDto passengerDetailsDto) {
		return PassengerDetails.builder().passengerName(passengerDetailsDto.getPassengerName())
				.gender(passengerDetailsDto.getGender()).age(passengerDetailsDto.getAge())
				.idProofNumber(passengerDetailsDto.getGender()).build();
	}
	
	private Booking mapToModel(BookingRequestDto bookingRequestDto) {
		return Booking.builder().email(bookingRequestDto.getEmail()).flightId(bookingRequestDto.getFlightId()).build();
	}

}
