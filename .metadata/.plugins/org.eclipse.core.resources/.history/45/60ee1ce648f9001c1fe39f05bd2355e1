package com.flightapp.flightservice.service.impl;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import com.flightapp.flightservice.dto.AirlineRequest;
import com.flightapp.flightservice.dto.FlightRequest;
import com.flightapp.flightservice.dto.FlightResponse;
import com.flightapp.flightservice.model.Airline;
import com.flightapp.flightservice.model.Flight;
import com.flightapp.flightservice.repository.AirlineRepository;
import com.flightapp.flightservice.repository.FlightRepository;
import com.flightapp.flightservice.service.AirlineService;
import com.flightapp.flightservice.service.FlightService;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class FlightServiceImpl implements FlightService {

	private final FlightRepository flightRepository;
	
	private final AirlineRepository airlineRepository;

	private FlightResponse mapToDto(Flight flight) {
		return FlightResponse.builder().id(flight.getId().toString()).flightNumber(flight.getFlightNumber())
				.price(flight.getPrice()).build();
	}
	
	private Flight mapToModel(FlightRequest flightRequest) {
		return Flight.builder().flightNumber(flightRequest.getFlightNumber())
				.price(flightRequest.getPrice()).build();
	}

	@Override
	public void addNewFlightDetails(FlightRequest flightRequest) {
		return airlineRepository.findById(flightRequest.getAirlineId()).map(airline -> {
            flight.set(post);
            return commentRepository.save(comment);
        }).orElseThrow(() -> new ResourceNotFoundException("PostId " + postId + " not found"));
		airlineRepository.findById(Long.valueOf(flightRequest.getAirlineId()).map()
		Flight flight = Flight.builder().flightNumber(flightRequest.getFlightNumber()).price(flightRequest.getPrice())
				.build();
		flightRepository.save(flight);

	}

	@Override
	public List<FlightResponse> findAll() {
		List<Flight> flights = flightRepository.findAll();
		return flights.stream().map(this::mapToDto).collect(Collectors.toList());
	}


	@Override
	public Flight getAllByAirlineId(Long airlineId) {
		return flightRepository.findByAirlineId(airlineId);
	}
}
