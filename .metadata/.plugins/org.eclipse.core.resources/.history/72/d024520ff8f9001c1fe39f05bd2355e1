package com.flightapp.flightservice.controller;

import java.util.List;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.flightapp.commonmodule.utility.JsonUtil;
import com.flightapp.flightservice.dto.FlightRequest;
import com.flightapp.flightservice.dto.FlightResponse;
import com.flightapp.flightservice.exceptions.ResourceNotFoundException;
import com.flightapp.flightservice.model.Flight;
import com.flightapp.flightservice.service.FlightService;

import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/api/flight")
@RequiredArgsConstructor
public class FlightController {

	private final FlightService flightService;
	
	private final KafkaTemplate<String, String> kafkaTemplate;


	@PostMapping("/")
	public FlightResponse addFlightDetails(@Valid @RequestBody FlightRequest flightRequest) throws ResourceNotFoundException{
		kafkaTemplate.send("inventory-service", "abs", JsonUtil.toJson(response));

		return flightService.addNewFlightDetails(flightRequest);
	}

	@GetMapping("/search")
	public List<FlightResponse> getAllFlights() {
		return flightService.findAll();
	}

	@PutMapping("/")
	public FlightResponse updateFlightDetails(@RequestBody FlightRequest flightRequest) {
		return flightService.updateFlightDetails(flightRequest);
	}

	@GetMapping("/airline/{airlineId}/flights")
	public Flight getAllFlightsByAirlineId(@PathVariable(value = "airlineId") Long airlineId) {
		return flightService.getAllByAirlineId(airlineId);
	}

	@DeleteMapping("/")
	public ResponseEntity<?> deleteFlightById(@RequestParam(value = "airlineId") Long airlineId,
			@RequestParam(value = "flightId") Long flightId) {
		return flightService.deleteFlightByIdAndAirlineId(flightId, airlineId);

	}

}
