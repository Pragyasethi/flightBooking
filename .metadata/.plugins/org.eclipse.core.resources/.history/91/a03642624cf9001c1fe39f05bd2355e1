package com.flightapp.flightservice.service.impl;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import com.flightapp.exceptionhandler.exceptions.ResourceNotFoundException;
import com.flightapp.flightservice.dto.FlightRequest;
import com.flightapp.flightservice.dto.FlightResponse;
import com.flightapp.flightservice.model.Airline;
import com.flightapp.flightservice.model.Flight;
import com.flightapp.flightservice.repository.AirlineRepository;
import com.flightapp.flightservice.repository.FlightRepository;
import com.flightapp.flightservice.service.FlightService;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class FlightServiceImpl implements FlightService {

	private final FlightRepository flightRepository;

	private final AirlineRepository airlineRepository;

	private FlightResponse mapToDto(Flight flight) {
		return FlightResponse.builder().id(flight.getId().toString()).flightNumber(flight.getFlightNumber())
				.price(flight.getPrice()).build();
	}

	private Flight mapToModel(FlightRequest flightRequest) {
		return Flight.builder().flightNumber(flightRequest.getFlightNumber()).price(flightRequest.getPrice()).build();
	}

	@Override
	public FlightResponse addNewFlightDetails(FlightRequest flightRequest) {
		Flight flight = mapToModel(flightRequest);
		return airlineRepository.findById(flightRequest.getAirlineIdAsLong()).map(airline -> {
			flight.setAirline(airline);
			return mapToDto(flightRepository.save(flight));
		}).orElseThrow(() -> new ResourceNotFoundException(
				"Airline with id " + flightRequest.getAirlineId() + " Not found to add Flight Details "));

	}

	@Override
	public List<FlightResponse> findAll() {
		List<Flight> flights = flightRepository.findAll();
		return flights.stream().map(this::mapToDto).collect(Collectors.toList());
	}

	@Override
	public Flight getAllByAirlineId(Long airlineId) {
		return flightRepository.findByAirlineId(airlineId);
	}

	@Override
	public FlightResponse updateFlightDetails(FlightRequest flightRequest) {
		if (!airlineRepository.existsById(flightRequest.getAirlineIdAsLong())) {
			throw new ResourceNotFoundException("Airline with id " + flightRequest.getAirlineId() + " not found");
		}
		Flight updatedFlight = flightRepository.findById(flightRequest.getIdAsLong())
				.map(flight -> flightRepository.save(mapToModel(flightRequest)))
				.orElseThrow(() -> new ResourceNotFoundException(
						"Flight Details not found for id: " + flightRequest.getId()));
		return mapToDto(updatedFlight);
	}

}
