package com.flightapp.exceptionhandler.utility;

import java.util.ArrayList;
import java.util.List;

import org.hibernate.exception.ConstraintViolationException;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.FieldError;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

import com.flightapp.exceptionhandler.exceptions.ResourceNotFoundException;
import com.flightapp.exceptionhandler.model.ApiError;

@ControllerAdvice
public class GlobalCustomExceptionHandler extends ResponseEntityExceptionHandler{

	
//	@Override
//	protected ResponseEntity<Object> handleMethodArgumentNotValid(
//	  MethodArgumentNotValidException ex, 
//	  HttpHeaders headers, 
//	  HttpStatus status, 
//	  WebRequest request) {
//	    List<String> errors = new ArrayList<>();
//	    for (FieldError error : ex.getBindingResult().getFieldErrors()) {
//	        errors.add(error.getField() + ": " + error.getDefaultMessage());
//	    }
//	    for (ObjectError error : ex.getBindingResult().getGlobalErrors()) {
//	        errors.add(error.getObjectName() + ": " + error.getDefaultMessage());
//	    }
//	    
//	    ApiError apiError = 
//	      new ApiError(HttpStatus.BAD_REQUEST, ex.getLocalizedMessage(), errors);
//	    return handleExceptionInternal(
//	      ex, apiError, headers, apiError.getStatus(), request);
//	}
//	
//	@ExceptionHandler({ ConstraintViolationException.class })
//	public ResponseEntity<Object> handleConstraintViolation(
//	  ConstraintViolationException ex, WebRequest request) {
//	    List<String> errors = new ArrayList<>();
//	    for (ConstraintViolation<?> violation : ex.getConstraintViolations()) {
//	        errors.add(violation.getRootBeanClass().getName() + " " + 
//	          violation.getPropertyPath() + ": " + violation.getMessage());
//	    }
//
//	    ApiError apiError = 
//	      new ApiError(HttpStatus.BAD_REQUEST, ex.getLocalizedMessage(), errors);
//	    return new ResponseEntity<>(
//	      apiError, new HttpHeaders(), apiError.getStatus());
//	}
	
	@ExceptionHandler({ ResourceNotFoundException.class })
	public ResponseEntity<Object> handleConstraintViolation(
			  ConstraintViolationException ex, WebRequest request) {
			    List<String> errors = new ArrayList<>();
			    for (ConstraintViolation<?> violation : ex.getConstraintViolations()) {
			        errors.add(violation.getRootBeanClass().getName() + " " + 
			          violation.getPropertyPath() + ": " + violation.getMessage());
			    }

			    ApiError apiError = 
			      new ApiError(HttpStatus.BAD_REQUEST, ex.getLocalizedMessage(), errors);
			    return new ResponseEntity<>(
			      apiError, new HttpHeaders(), apiError.getStatus());
			}

}
